0) CODING STYLE
* 4 space wide soft tabs

* don't go over 80 chars wide on a line

* never cut and paste more than 2 lines of code.  use a function.

* good use of whitespace

* good comments.  don't comment obvious stuff, explain complicated stuff

* good function names.  Pls don't go crazy removing vowels to make names
short.  Much better is a longer name whose meaning is immediately obvious

* good variable names.  Same as function names unless the variable has a 
very temporary lifetime in which case some abbreviation is OK.

* Use of brackets.  Always use brackets unless the action is on same line as
condition.  Bracket can be on the end of the line if the line doesn't wrap.
If the line wraps, then the bracket must be dropped to the next line. 
Examples:

// OK
if (x>y) do_something();  

// NOT OK
if (x>y) 
  do_something(); 

// OK
if (x>y) {
  do_something();
}

// OK
int function(arg,arg) {
  do_something();
}

// OK
int function(arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,
              arg,arg,arg,arg,arg,arg)
{
  do_something();
}

// NOT OK
int function(arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,arg,
              arg,arg,arg,arg,arg,arg) {
  do_something();
}

// OK
for(a,b,c) {
  do_something();
}

// OK
for(a,
    b,
    c)
{
  do_something();
}

// NOT OK
for(a,
    b,
    c) {
  do_something();
}

// NOT OK (if you're gonna drop b, then pls drop c as well)
for(a,
    b, c) {
  do_something();
}

1) AUTOGEN
./autogen.sh is not your friend.  Very strict requirements.  Makefile.tools
is your friend.  Do 'make -f Makefile.tools' to install all the necessary
build tools into ./buildtools/bin.  Then prepend that to your PATH and
then ./autogen.sh will just work.

2) CONFIGURE
./easyconf.sh is your friend.  Here are the environment variables I set:

setenv PLFS_WANT_ALL_DEBUG 1
setenv PLFS_WANT_DEBUG_FLAGS 1
setenv PLFS_WANT_VERBOSE_CONF_OUT 1 
setenv PLFS_WANT_ADIO 0
# treat all build warnings as errors.  No build warnings!
setenv CFLAGS '-Wall -Werror'
setenv CXXFLAGS '-Wall -Werror'

Notice especially the bottom two.  We want warning free code so print out
all warnings and treat them as errors.
