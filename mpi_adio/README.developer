##############################################################################
        Developing the PLFS ROMIO ADIO
##############################################################################

*** Creating a new prep.patch file ***

Use existing patch files as a template. In general, it is sufficient to grep
for PANFS (case-insensitive) and make modifications for PLFS wherever PANFS
appears. Search in romio, romio/adio, romio/include and romio/common.

We do have to do one bug fix. ROMIO, when doing data sieving, wants to do a 
read-modify-write. If the file is opened write only, ROMIO will instead open
the file in read-write mode, but report write only. PLFS does not perform well
in read-write mode, so we want to disable that. In romio/common, grep for
'data sieving' or 'read-modify-write'. Where ever this type of code appears:

/* For writing with data sieving, a read-modify-write is needed. If 
   the file is opened for write_only, the read will fail. Therefore, 
   if write_only, open the file as read_write, but record it as write_only 
   in fd, so that get_amode returns the right answer. */ 

    orig_amode_wronly = access_mode; 
    if (access_mode & ADIO_WRONLY) { 
        access_mode = access_mode ^ ADIO_WRONLY; 
        access_mode = access_mode | ADIO_RDWR; 
    } 
    fd->access_mode = access_mode;

change it to this:

/* For writing with data sieving, a read-modify-write is needed. If 
   the file is opened for write_only, the read will fail. Therefore, 
   if write_only, open the file as read_write, but record it as write_only 
   in fd, so that get_amode returns the right answer. */ 

    orig_amode_wronly = access_mode; 
    if (access_mode & ADIO_WRONLY && fd->file_system != ADIO_PLFS) { 
        access_mode = access_mode ^ ADIO_WRONLY; 
        access_mode = access_mode | ADIO_RDWR; 
    } 
    fd->access_mode = access_mode;

One important thing to check is to make sure the same number of function
pointers in the struct ADIOI_Fns_struct in adioi.h appear in 
ADIO_PLFS_operations in ad_plfs.c. This is because the members of this struct
are called by offset, not by name. If PLFS's version of the struct has a
different number of function pointers, the wrong function may be called
resulting in bad behavior (such as seg faults).


*** A couple of possible optimizations ***

1) We are already only doing the container creation by a single rank per node.

2) We could expand the API and then only write one index by aggregating
   the index info during collective writes

3) For reads, we could put the global index into shared memory?  That's
   probably not a big savings anyway since the files will be cached so
   rereading them is not a big deal and the space overhead of redundant
   copies is also probably not a big deal.

4) On the open, we are already just one rank per node create the openhost file.

5) On the close, we could have just one rank create the metadata file
   by doing reduces on everyone's total data and last offset.

